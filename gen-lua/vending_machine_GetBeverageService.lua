--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'vending_machine_ttypes'

GetBeverageServiceClient = __TObject.new(__TClient, {
  __type = 'GetBeverageServiceClient'
})

function GetBeverageServiceClient:ReturnBeverage(BeverageType)
  self:send_ReturnBeverage(BeverageType)
  return self:recv_ReturnBeverage(BeverageType)
end

function GetBeverageServiceClient:send_ReturnBeverage(BeverageType)
  self.oprot:writeMessageBegin('ReturnBeverage', TMessageType.CALL, self._seqid)
  local args = ReturnBeverage_args:new{}
  args.BeverageType = BeverageType
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function GetBeverageServiceClient:recv_ReturnBeverage(BeverageType)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReturnBeverage_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
GetBeverageServiceIface = __TObject:new{
  __type = 'GetBeverageServiceIface'
}


GetBeverageServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'GetBeverageServiceProcessor'
})

function GetBeverageServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    if oprot ~= nil then
      iprot:skip(TType.STRUCT)
      iprot:readMessageEnd()
      x = TApplicationException:new{
        errorCode = TApplicationException.UNKNOWN_METHOD
      }
      oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x:write(oprot)
      oprot:writeMessageEnd()
      oprot.trans:flush()
    end
    return false, 'Unknown function '..name
  else
    return self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function GetBeverageServiceProcessor:process_ReturnBeverage(seqid, iprot, oprot, server_ctx)
  local args = ReturnBeverage_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReturnBeverage_result:new{}
  local status, res = pcall(self.handler.ReturnBeverage, self.handler, args.BeverageType)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReturnBeverage', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
  return status, res
end

-- HELPER FUNCTIONS AND STRUCTURES

ReturnBeverage_args = __TObject:new{
  BeverageType
}

function ReturnBeverage_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.BeverageType = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReturnBeverage_args:write(oprot)
  oprot:writeStructBegin('ReturnBeverage_args')
  if self.BeverageType ~= nil then
    oprot:writeFieldBegin('BeverageType', TType.I64, 1)
    oprot:writeI64(self.BeverageType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReturnBeverage_result = __TObject:new{
  success
}

function ReturnBeverage_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReturnBeverage_result:write(oprot)
  oprot:writeStructBegin('ReturnBeverage_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end